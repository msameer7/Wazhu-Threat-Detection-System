# -*- coding: utf-8 -*-
"""Basit's Final Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GZip8oO3wU7ipCbC7fyEx3boyxnYSNW5
"""

import pandas as pd

# STEP 1: Load your dataset
wazuh = pd.read_csv("generated_5000_logs.csv")

wazuh.columns

wazuh.info()

real_threat_df = wazuh[wazuh['label'] == 'real threat']

real_threat_df

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import classification_report

# Rename columns for simplicity
wazuh = wazuh.rename(columns={
    '_source.data.url': 'url',
    '_source.rule.firedtimes': 'firedtimes',
    '_source.rule.level': 'level',
    'label': 'label'
})

wazuh

# Encode the target label
wazuh['label'] = wazuh['label'].map({'real threat': 1, 'false positive': 0})

wazuh

# Feature + label split
X_text = wazuh['url']  # Text feature
X_meta = wazuh[['firedtimes', 'level']]  # Numeric features
y = wazuh['label']

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.feature_extraction.text import TfidfVectorizer

# Create a column transformer for both text and numeric data
preprocessor = ColumnTransformer(
    transformers=[
        ('text', TfidfVectorizer(), 'url'),
        ('num', StandardScaler(), ['firedtimes', 'level'])
    ]
)

pipeline = make_pipeline(preprocessor, DecisionTreeClassifier(random_state=42))

# Train-test split
X = wazuh[['url', 'firedtimes', 'level']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
pipeline.fit(X_train, y_train)

# Evaluate
y_pred = pipeline.predict(X_test)
print(classification_report(y_test, y_pred))

# Example input: a suspicious payload
sample = pd.DataFrame([{
    'url': "/search?q=' UNION SELECT null--",
    'firedtimes': 7,
    'level': 6
}])

# Predict using the trained pipeline
prediction = pipeline.predict(sample)

# Interpret the result
label = "real threat" if prediction[0] == 1 else "false positive"
print("Prediction:", label)

